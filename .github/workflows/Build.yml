# .github/workflows/build-telegram-ios.yml

name: Build Telegram iOS (Unsigned)

on:
  workflow_dispatch: # Allows manual triggering
  # push: # Uncomment and adjust if you want it to run on pushes
  #   branches:
  #     - master # Or whichever branch Telegram uses as main development branch

jobs:
  build:
    name: Build Unsigned Telegram IPA
    runs-on: macos-latest # Use the latest available macOS runner

    # Define environment variables accessible by steps below
    # These secrets MUST be configured in your repository's Settings > Secrets and variables > Actions
    env:
      TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
      TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
      # Force non-interactive mode for scripts if needed (sometimes helps in CI)
      DEBIAN_FRONTEND: noninteractive
      # Define output path for Make.py - Use workspace for absolute path clarity
      BUILD_OUTPUT_PATH: ${{ github.workspace }}/build_output
      # Define path for the generated JSON config file
      CONFIG_JSON_PATH: ${{ runner.temp }}/telegram_config.json

    steps:
      - name: Check for Secrets Availability
        if: env.TELEGRAM_API_ID == '' || env.TELEGRAM_API_HASH == ''
        run: |
          echo "Error: TELEGRAM_API_ID or TELEGRAM_API_HASH secrets are not set."
          echo "Please configure them in your repository's Settings > Secrets and variables > Actions."
          exit 1
        shell: bash

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # If running this in your fork, remove the 'repository:' line below
          # repository: TelegramMessenger/Telegram-iOS
          submodules: 'recursive' # Important for fetching all dependencies

      # Optional: Select specific Xcode version if needed (Check .xcode-version)
      # - name: Select Xcode version
      #   run: |
      #     # ... (Xcode selection logic) ...
      #   shell: bash

      - name: Check Tools Versions
        run: |
          xcodebuild -version
          python3 --version
          # bazel --version # Check bazel if prepare script doesn't guarantee it
        shell: bash

      # Setup likely still involves Bazel preparation called by Make.py or needed beforehand
      - name: Set up Build Environment (Bazel, etc.)
        run: |
          # Run preparation scripts mentioned in README, likely still needed by Make.py
          # Adjust paths/scripts based on current README/repo structure
          if [ -f "build-system/prepare-bazel.sh" ]; then
             echo "Running prepare-bazel.sh..."
            ./build-system/prepare-bazel.sh
          else
             echo "Warning: build-system/prepare-bazel.sh not found."
             # Consider installing bazel via brew if script is missing and needed
          fi
          # Add any other setup steps mentioned in README (e.g., pip install) if required by Make.py
        shell: bash

      # --- NEW STEP: Generate Configuration JSON ---
      - name: Generate Configuration JSON
        run: |
          echo "Generating build configuration at ${{ env.CONFIG_JSON_PATH }}"
          # Using printf for safer handling of potential special characters in secrets
          # Ensure proper JSON quoting (strings vs booleans)
          printf '{\n' > "${{ env.CONFIG_JSON_PATH }}"
          printf '  "bundle_id": "org.githubactions.telegram.temp",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          # Use the API keys from environment variables (secrets)
          printf '  "api_id": "%s",\n' "${{ env.TELEGRAM_API_ID }}" >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "api_hash": "%s",\n' "${{ env.TELEGRAM_API_HASH }}" >> "${{ env.CONFIG_JSON_PATH }}"
          # Placeholder/default values for other fields suitable for unsigned build
          printf '  "team_id": "",\n' >> "${{ env.CONFIG_JSON_PATH }}" # Blank Team ID for unsigned/no-provisioning build
          printf '  "app_center_id": "0",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "is_internal_build": "true",\n' >> "${{ env.CONFIG_JSON_PATH }}" # Mark as internal/CI build
          printf '  "is_appstore_build": "false",\n' >> "${{ env.CONFIG_JSON_PATH }}" # Not an App Store build
          printf '  "appstore_id": "0",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "app_specific_url_scheme": "tg",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "premium_iap_product_id": "",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "enable_siri": false,\n' >> "${{ env.CONFIG_JSON_PATH }}" # JSON boolean false
          printf '  "enable_icloud": false\n' >> "${{ env.CONFIG_JSON_PATH }}" # JSON boolean false - last line, no comma
          printf '}\n' >> "${{ env.CONFIG_JSON_PATH }}"

          echo "Configuration file content:"
          cat "${{ env.CONFIG_JSON_PATH }}"
        shell: bash


      # --- Main Build Step using Make.py ---
      - name: Build App using Make.py (Unsigned)
        run: |
          # Using corrected path to Make.py
          MAKE_PY_SCRIPT_PATH="build-system/Make/Make.py"

          if [ ! -f "${MAKE_PY_SCRIPT_PATH}" ]; then
            echo "Error: Build script not found at expected location: ${MAKE_PY_SCRIPT_PATH}"
            exit 1
          fi

          echo "Starting Make.py build using ${MAKE_PY_SCRIPT_PATH}..."

          # Execute Make.py build command from repository root
          # Added --configurationPath pointing to the generated JSON file
          # Using 'release_universal' for configuration based on previous error message
          # *** IMPORTANT: Still verify the exact flag for disabling signing (--disable-provisioning is placeholder) ***
          python3 "${MAKE_PY_SCRIPT_PATH}" build \
            --configurationPath="${{ env.CONFIG_JSON_PATH }}" \ # <-- ADDED THIS ARGUMENT
            --configuration=release_universal \
            --buildNumber=100001 \
            --build-path="${{ env.BUILD_OUTPUT_PATH }}" \
            --disable-provisioning # <-- VERIFY/REPLACE THIS FLAG NAME
            # Add other necessary flags from README (e.g., --platform=ios, specific build number if required)

          echo "Make.py build finished."
        shell: bash
        # API Keys are passed via environment variables implicitly to the JSON generation step

      # --- Package IPA Step ---
      # Assumes Make.py created an unsigned .app bundle in BUILD_OUTPUT_PATH
      - name: Package Unsigned IPA
        run: |
          echo "Packaging IPA..."
          # Verify the exact output .app name (likely Telegram.app)
          APP_NAME="Telegram.app"
          APP_PATH="${{ env.BUILD_OUTPUT_PATH }}/${APP_NAME}"
          IPA_OUTPUT_DIR="${{ runner.temp }}/ipa_output"
          IPA_NAME="Telegram-unsigned.ipa"
          FINAL_IPA_PATH="${{ runner.temp }}/${IPA_NAME}" # Full path for artifact upload

          if [ ! -d "${APP_PATH}" ]; then
             echo "Error: .app bundle not found at expected Make.py output location: ${APP_PATH}"
             echo "Check the output of the 'Build App using Make.py' step or the script's arguments."
             echo "Listing contents of build output path:"
             ls -lA "${{ env.BUILD_OUTPUT_PATH }}"
             exit 1
          fi

          # Create the Payload directory and copy the .app into it
          PAYLOAD_DIR="${IPA_OUTPUT_DIR}/Payload"
          mkdir -p "${PAYLOAD_DIR}"
          echo "Copying ${APP_PATH} to ${PAYLOAD_DIR}/"
          cp -R "${APP_PATH}" "${PAYLOAD_DIR}/"

          # Zip the Payload directory to create the final IPA
          echo "Zipping IPA..."
          (cd "${IPA_OUTPUT_DIR}" && zip -qr "../${IPA_NAME}" Payload)

          echo "Unsigned IPA created at ${FINAL_IPA_PATH}"
        shell: bash

      - name: Upload Unsigned IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Telegram-iOS-Unsigned-IPA
          path: ${{ runner.temp }}/Telegram-unsigned.ipa # Upload the IPA from the runner temp dir
          if-no-files-found: error # Fail the step if IPA is missing

      - name: Clean up build directories (optional)
        if: always() # Run even if previous steps fail
        run: |
          echo "Cleaning up intermediate build directories..."
          rm -rf "${{ env.BUILD_OUTPUT_PATH }}" # Remove Make.py output dir
          rm -rf "${{ runner.temp }}/ipa_output" # Remove IPA packaging dir
          rm -f "${{ env.CONFIG_JSON_PATH }}" # Remove generated config file
        shell: bash