# .github/workflows/build-telegram-ios.yml

name: Build Telegram iOS (Unsigned)

on:
  workflow_dispatch: # Allows manual triggering
  # push: # Uncomment and adjust if you want it to run on pushes
  #   branches:
  #     - master # Or whichever branch Telegram uses as main development branch

jobs:
  build:
    name: Build Unsigned Telegram IPA
    runs-on: macos-latest # Use the latest available macOS runner

    # Define environment variables accessible by steps below
    # These secrets MUST be configured in your repository's Settings > Secrets and variables > Actions
    env:
      TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
      TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
      # Force non-interactive mode for scripts if needed (sometimes helps in CI)
      DEBIAN_FRONTEND: noninteractive
      # Define path for the generated JSON config file
      CONFIG_JSON_PATH: ${{ github.workspace }}/telegram_config.json
      # Default DSYM location (parent directory) - Still useful for DSYM search
      DEFAULT_DSYM_DIR: bazel-bin/Telegram

    steps:
      - name: Check for Secrets Availability
        if: env.TELEGRAM_API_ID == '' || env.TELEGRAM_API_HASH == ''
        run: |
          echo "Error: TELEGRAM_API_ID or TELEGRAM_API_HASH secrets are not set."
          echo "Please configure them in your repository's Settings > Secrets and variables > Actions."
          exit 1
        shell: bash

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # If running this in your fork, remove the 'repository:' line below
          # repository: TelegramMessenger/Telegram-iOS
          submodules: 'recursive' # Important for fetching all dependencies

      # Optional: Select specific Xcode version if needed (Check .xcode-version)
      # - name: Select Xcode version
      #   run: |
      #     # ... (Xcode selection logic) ...
      #   shell: bash

      - name: Check Tools Versions
        run: |
          xcodebuild -version
          python3 --version
          # bazel --version # Check bazel if prepare script doesn't guarantee it
        shell: bash

      # Setup likely still involves Bazel preparation called by Make.py or needed beforehand
      - name: Set up Build Environment (Bazel, etc.)
        run: |
          # Run preparation scripts mentioned in README, likely still needed by Make.py
          # Adjust paths/scripts based on current README/repo structure
          if [ -f "build-system/prepare-bazel.sh" ]; then
             echo "Running prepare-bazel.sh..."
            ./build-system/prepare-bazel.sh
          else
             echo "Warning: build-system/prepare-bazel.sh not found."
             # Consider installing bazel via brew if script is missing and needed
          fi
          # Add any other setup steps mentioned in README (e.g., pip install) if required by Make.py
        shell: bash

      # --- Generate Configuration JSON ---
      - name: Generate Configuration JSON
        run: |
          # Path now uses github.workspace as defined in env block
          echo "Generating build configuration at ${{ env.CONFIG_JSON_PATH }}"
          # Using printf for safer handling of potential special characters in secrets
          # Ensure proper JSON quoting (strings vs booleans)
          printf '{\n' > "${{ env.CONFIG_JSON_PATH }}"
          printf '  "bundle_id": "org.githubactions.telegram.temp",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          # Use the API keys from environment variables (secrets)
          printf '  "api_id": "%s",\n' "${{ env.TELEGRAM_API_ID }}" >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "api_hash": "%s",\n' "${{ env.TELEGRAM_API_HASH }}" >> "${{ env.CONFIG_JSON_PATH }}"
          # Placeholder/default values for other fields suitable for unsigned build
          printf '  "team_id": "",\n' >> "${{ env.CONFIG_JSON_PATH }}" # Blank Team ID should signal unsigned build
          printf '  "app_center_id": "0",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "is_internal_build": "true",\n' >> "${{ env.CONFIG_JSON_PATH }}" # Mark as internal/CI build
          printf '  "is_appstore_build": "false",\n' >> "${{ env.CONFIG_JSON_PATH }}" # Not an App Store build
          printf '  "appstore_id": "0",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "app_specific_url_scheme": "tg",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "premium_iap_product_id": "",\n' >> "${{ env.CONFIG_JSON_PATH }}"
          printf '  "enable_siri": false,\n' >> "${{ env.CONFIG_JSON_PATH }}" # JSON boolean false
          printf '  "enable_icloud": false\n' >> "${{ env.CONFIG_JSON_PATH }}" # JSON boolean false - last line, no comma
          printf '}\n' >> "${{ env.CONFIG_JSON_PATH }}"

          echo "Configuration file content:"
          cat "${{ env.CONFIG_JSON_PATH }}"
        shell: bash


      # --- Main Build Step using Make.py ---
      - name: Build App using Make.py (Unsigned)
        run: |
          # Using corrected path to Make.py
          MAKE_PY_SCRIPT_PATH="build-system/Make/Make.py"

          if [ ! -f "${MAKE_PY_SCRIPT_PATH}" ]; then
            echo "Error: Build script not found at expected location: ${MAKE_PY_SCRIPT_PATH}"
            exit 1
          fi

          echo "Starting Make.py build using ${MAKE_PY_SCRIPT_PATH}..."

          # Execute Make.py build command - Using SINGLE LINE to avoid shell parsing issues
          python3 "${MAKE_PY_SCRIPT_PATH}" build --configurationPath="${{ env.CONFIG_JSON_PATH }}" --configuration=release_arm64 --buildNumber=100001 --codesigningInformationPath=build-system/fake-codesigning
          # Add other necessary flags from README if any (e.g., --platform=ios) to the end of the single line above.

          echo "Make.py build finished."
        shell: bash
        # API Keys are passed via environment variables implicitly to the JSON generation step

      # --- Find the generated IPA file ---
      - name: Find Telegram.ipa
        id: find_ipa # Give step ID to reference output
        run: |
          echo "Searching for Telegram.ipa in bazel-out and bazel-bin..."
          # Search likely output directories. Use mapfile to handle potential newlines if multiple found.
          # Redirect stderr to avoid noise if dirs don't exist yet.
          mapfile -t ipa_files < <(find bazel-out bazel-bin -name "Telegram.ipa" -type f -print 2>/dev/null)
          file_count=${#ipa_files[@]}

          echo "Found ${file_count} 'Telegram.ipa' file(s)."

          if [ "$file_count" -eq 1 ]; then
            # Exactly one found, this is the expected outcome
            IPA_PATH="${ipa_files[0]}"
            echo "Located IPA at: ${IPA_PATH}"
            # Set the path as an output variable for the next step
            echo "ipa_path=${IPA_PATH}" >> $GITHUB_OUTPUT
          elif [ "$file_count" -eq 0 ]; then
            # None found, fail the build
            echo "Error: Telegram.ipa not found in bazel-out or bazel-bin after build."
            echo "Listing contents of likely output directories for debugging:"
            ls -lAR bazel-bin/Telegram || echo "Could not list bazel-bin/Telegram"
            ls -lAR bazel-out || echo "Could not list bazel-out"
            exit 1
          else
            # Multiple found, this is ambiguous and likely an error
            echo "Error: Found multiple Telegram.ipa files:"
            printf "  %s\n" "${ipa_files[@]}"
            exit 1
          fi
        shell: bash

      # --- Prepare DSYM Artifact (Optional but Recommended) ---
      - name: Prepare DSYM Artifact
        id: package_dsyms
        if: success() # Only run if build succeeded
        run: |
          DSYM_ZIP_NAME="Telegram.DSYMs.zip"
          DSYM_ZIP_PATH="${{ runner.temp }}/${DSYM_ZIP_NAME}"
          # Search in the likely directory relative to bazel-bin
          DSYM_SOURCE_DIR="${{ env.DEFAULT_DSYM_DIR }}"
          DSYM_TEMP_PACKAGE_DIR="${{ runner.temp }}/dsym_package"

          echo "Searching for .dSYM bundles in ${DSYM_SOURCE_DIR}"
          # Count .dSYM directories within the source dir
          dsym_files_count=$(find "${DSYM_SOURCE_DIR}" -maxdepth 1 -name "*.dSYM" -type d 2>/dev/null | wc -l)

          if [ $dsym_files_count -gt 0 ]; then
            echo "Found .dSYM files. Preparing zip artifact at ${DSYM_ZIP_PATH}"
            mkdir -p "${DSYM_TEMP_PACKAGE_DIR}"
            # Copy only the .dSYM directories found directly within DSYM_SOURCE_DIR
            find "${DSYM_SOURCE_DIR}" -maxdepth 1 -name "*.dSYM" -type d -exec cp -R {} "${DSYM_TEMP_PACKAGE_DIR}/" \;
            echo "Contents to be zipped:"
            ls -lA "${DSYM_TEMP_PACKAGE_DIR}"
            # Create zip file from the copied dSYMs
            (cd "${DSYM_TEMP_PACKAGE_DIR}" && zip -qr "${DSYM_ZIP_PATH}" .)
            # Set output for the upload step
            echo "dsym_zip_path=${DSYM_ZIP_PATH}" >> $GITHUB_OUTPUT
            echo "DSYM artifact created."
          else
            echo "No .dSYM files found in ${DSYM_SOURCE_DIR}. Skipping DSYM artifact."
            echo "dsym_zip_path=" >> $GITHUB_OUTPUT # Ensure output is blank
          fi
        shell: bash

      # --- Upload IPA Artifact ---
      - name: Upload Unsigned IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Telegram-iOS-Unsigned-IPA
          # Path uses the output from the find_ipa step
          path: ${{ steps.find_ipa.outputs.ipa_path }}
          if-no-files-found: error # Fail the step if IPA is missing

      # --- Upload DSYM Artifact ---
      - name: Upload DSYM Artifact (Optional)
        # Upload the zip created in the 'Prepare DSYM Artifact' step if it exists
        if: success() && steps.package_dsyms.outputs.dsym_zip_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: Telegram-iOS-DSYMs
          path: ${{ steps.package_dsyms.outputs.dsym_zip_path }}
          if-no-files-found: error # Should exist if path is set

      - name: Clean up build directories (optional)
        if: always() # Run even if previous steps fail
        run: |
          echo "Cleaning up intermediate build directories..."
          # Remove common build output dirs - adjust if Make.py uses others
          rm -rf "./build"
          rm -rf "./bazel-out"
          rm -rf "./bazel-bin"
          rm -f "${{ env.CONFIG_JSON_PATH }}" # Remove generated config file
          # Optionally remove zipped DSYMs from temp
          rm -f "${{ runner.temp }}/Telegram.DSYMs.zip"
          rm -rf "${{ runner.temp }}/dsym_package"
        shell: bash